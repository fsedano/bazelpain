package mylib

import (
	"context"
	"fmt"
	"log"
	"time"

	k8sv1 "k8s.io/api/core/v1"
	apierrs "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/wait"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"

	snapshotv1 "github.com/kubernetes-csi/external-snapshotter/client/v6/apis/volumesnapshot/v1"

	cloudevents "github.com/cloudevents/sdk-go/v2"
)

const (
	defaultPollInterval   = 2 * time.Second
	defaultPollPeriod     = 270 * time.Second
	defaultPollPeriodFast = 30 * time.Second

	pvcPollInterval = defaultPollInterval
	pvcCreateTime   = defaultPollPeriod
	pvcDeleteTime   = defaultPollPeriod
	pvcPhaseTime    = defaultPollPeriod
)

func Receive(ctx context.Context) error {

	config, err := rest.InClusterConfig()
	if err != nil {
		panic(err.Error())
	}
	// creates the clientset
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		panic(err.Error())
	}
	log.Printf("Checking evt type...")
	log.Printf("We got space created!")
	space_id := "1234"
	space_owner := "111"
	pvc_name := fmt.Sprintf("pvc-%s", space_id)

	annotations := map[string]string{
		"devx.cisco.com/space-id":              fmt.Sprintf("%s", space_id),
		"devx.cisco.com/space-owner":           fmt.Sprintf("%s", space_owner),
		"devx.cisco.com/required-space":        "10",
		"devx.cisco.com/data-source.space-id":  "20",
		"devx.cisco.com/data-source.volume-id": "30",
	}
	labels := map[string]string{}
	pvc := newPVC(pvc_name, "10", "premium-nfs-rwx-delete", "v1", annotations, labels)
	_, err = createPVC(clientset, "baas", pvc)
	log.Printf("PVC=%s", pvc)
	log.Printf("Create pvc err=%s", err)
	err = WaitForPVCPhase(clientset, "baas", k8sv1.ClaimBound, pvc_name)
	if err != nil {
		log.Printf("Wait pvc err=%s", err)
		return err
	}
	return nil
}

func replyEvent(ev_type string, event cloudevents.Event) cloudevents.Event {
	event.SetType(ev_type)
	return event
}

func newPVC(pvcName, size, storageClassName, dataSourceName string, annotations, labels map[string]string) *k8sv1.PersistentVolumeClaim {
	var dataSourceObject *k8sv1.TypedLocalObjectReference
	apiGroup := "snapshot.storage.k8s.io"
	if len(dataSourceName) > 0 {
		dataSourceObject = &k8sv1.TypedLocalObjectReference{APIGroup: &apiGroup, Kind: "VolumeSnapshot", Name: dataSourceName}
	}
	return &k8sv1.PersistentVolumeClaim{
		ObjectMeta: metav1.ObjectMeta{
			Name:        pvcName,
			Annotations: annotations,
			Labels:      labels,
		},
		Spec: k8sv1.PersistentVolumeClaimSpec{
			AccessModes: []k8sv1.PersistentVolumeAccessMode{k8sv1.ReadWriteOnce},
			Resources: k8sv1.ResourceRequirements{
				Requests: k8sv1.ResourceList{
					k8sv1.ResourceName(k8sv1.ResourceStorage): resource.MustParse(size),
				},
			},
			StorageClassName: &storageClassName,
			DataSource:       dataSourceObject,
		},
	}
}

func createPVC(clientSet *kubernetes.Clientset, namespace string, def *k8sv1.PersistentVolumeClaim) (*k8sv1.PersistentVolumeClaim, error) {
	var pvc *k8sv1.PersistentVolumeClaim
	err := wait.PollImmediate(pvcPollInterval, pvcCreateTime, func() (bool, error) {
		var err error
		pvc, err = clientSet.CoreV1().PersistentVolumeClaims(namespace).Create(context.TODO(), def, metav1.CreateOptions{})
		if err == nil || apierrs.IsAlreadyExists(err) {
			return true, nil
		}
		return false, err
	})
	if err != nil {
		log.Printf("****%s", err)
		return nil, err
	}
	return pvc, nil
}

func WaitForPVCPhase(clientSet *kubernetes.Clientset, namespace string, phase k8sv1.PersistentVolumeClaimPhase, pvcName string) error {
	err := wait.PollImmediate(pvcPollInterval, pvcPhaseTime, func() (bool, error) {
		pvc, err := clientSet.CoreV1().PersistentVolumeClaims(namespace).Get(context.TODO(), pvcName, metav1.GetOptions{})
		if err != nil || pvc.Status.Phase != phase {
			return false, err
		}
		return true, nil
	})
	if err != nil {
		return fmt.Errorf("PersistentVolumeClaim %s not in phase %s within %v", pvcName, phase, pvcPhaseTime)
	}
	return nil
}

func findPVC(clientSet *kubernetes.Clientset, namespace, pvcName string) (*k8sv1.PersistentVolumeClaim, error) {
	return clientSet.CoreV1().PersistentVolumeClaims(namespace).Get(context.TODO(), pvcName, metav1.GetOptions{})
}

func deletePVC(clientSet *kubernetes.Clientset, namespace, pvcName string) error {
	return wait.PollImmediate(pvcPollInterval, pvcDeleteTime, func() (bool, error) {
		err := clientSet.CoreV1().PersistentVolumeClaims(namespace).Delete(context.TODO(), pvcName, metav1.DeleteOptions{})
		if err == nil || apierrs.IsNotFound(err) {
			return true, nil
		}
		return false, err
	})
}

// NewVolumeSnapshot initializes a VolumeSnapshot struct
func newVolumeSnapshot(name, namespace, sourcePvcName string, snapshotClassName *string) *snapshotv1.VolumeSnapshot {
	return &snapshotv1.VolumeSnapshot{
		ObjectMeta: metav1.ObjectMeta{
			Name:      name,
			Namespace: namespace,
		},
		Spec: snapshotv1.VolumeSnapshotSpec{
			Source: snapshotv1.VolumeSnapshotSource{
				PersistentVolumeClaimName: &sourcePvcName,
			},
			VolumeSnapshotClassName: snapshotClassName,
		},
	}
}
